int firstPosition(vector<int>& nums, int target, int start, int end){
        int ans = -1;
        while(start <= end){
            int mid = start + (end-start)/2;
            
            if (target == nums[mid]) {
                ans = mid;
                end = mid-1;
            }
            
            else if (target < nums[mid]) {
                end = mid - 1;
            }
            
            else {
                start = mid + 1;
            }   
        }
        return ans;
        
    }
    
    int lastPosition(vector<int>& nums, int target, int start, int end){
        int ans = -1;
        while(start <= end){
            int mid = start + (end-start) / 2;
            
            if (target == nums[mid]) {
                ans = mid;
                start = mid+1;
            }
            
            else if (target < nums[mid]) {
                end = mid - 1;
            }
            
            else {
                start = mid + 1;
            }   
        }
        return ans;
        
    }
    
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> range;
        int start = 0, end = nums.size() - 1;
        range.push_back(firstPosition(nums, target, start, end));
        range.push_back(lastPosition(nums, target, start, end));
        return range;
    }
